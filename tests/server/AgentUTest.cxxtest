/*
 * tests/server/AgentUTest.cxxtest
 *
 * Copyright (C) 2008 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * Written by Jared Wigmore <jared.wigmore@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <string>
#include <iostream>
#include <fstream>

#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>

using namespace opencog;

class MyAgentWithDefaults : public Agent
{

private:

    std::string  _name;
    unsigned int _count;

public:

    virtual const ClassInfo& classinfo() const { return info(); }
    static const ClassInfo& info() {
        static const ClassInfo _ci("opencog::MyAgentWithDefaults");
        return _ci;
    }
    
    MyAgentWithDefaults() : Agent() {
        _count = 0;
     
        static const std::string defaultConfig[] = {
        
            "MYAGENT_USE_BAYES", "true",
            "MYAGENT_ENERGY", "12345",
            "MYAGENT_ENTHUSIASM", "1000",
            "MYAGENT_MOOD", "happy",
            "",""
        };
        setParameters(defaultConfig);
     }
    ~MyAgentWithDefaults() {}
    void setFrequency(int f) { _frequency = f; }
    void setName(const std::string& n) { _name = n; }
    unsigned int count() { return _count; }
    void run(CogServer *server) {
        logger().debug("%ld: executed %s", server->getCycleCount(), _name.c_str());
        _count++;
    }
};

class AgentUTest :  public CxxTest::TestSuite
{

private:

    Factory<MyAgentWithDefaults, Agent> factory;

public:

    AgentUTest() {
        logger().setLevel(Logger::DEBUG);
        //logger().setPrintToStdoutFlag(true);
    }

    ~AgentUTest() {
	    // erase the log file if no assertions failed
	    if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().getFilename().c_str());
    }

    void setUp() {    
        CogServer& cogserver = static_cast<CogServer&>(server());
        cogserver.registerAgent(MyAgentWithDefaults::info().id, &factory);
    }

    void tearDown() {
        CogServer& cogserver = static_cast<CogServer&>(server());
        cogserver.unregisterAgent(MyAgentWithDefaults::info().id);
    }

    // tests that MyAgentWithDefaults sets Config's parameters to its defaults
    void testDefault() {
        logger().debug("BEGIN TEST: Agent default parameters");

        CogServer& cogserver = static_cast<CogServer&>(server());

        // create a MyAgentWithDefaults instance
        MyAgentWithDefaults* agent;
        agent = static_cast<MyAgentWithDefaults*>
                (cogserver.createAgent(MyAgentWithDefaults::info().id));
        
        logger().debug(config().to_string());
        // the first endl is to put this on a line after "Running 2 tests"
        cout << endl << agent->to_string() << endl;

        TS_ASSERT(config()["MYAGENT_USE_BAYES"] == "true");
        TS_ASSERT(config()["MYAGENT_ENERGY"] == "12345");
        TS_ASSERT(config()["MYAGENT_ENTHUSIASM"] == "1000");
        TS_ASSERT(config()["MYAGENT_MOOD"] == "happy");

        // destroy the MyAgentWithDefaults instance
        cogserver.destroyAllAgents(MyAgentWithDefaults::info().id);

        logger().debug("END TEST: Agent default parameters");
    }

    // tests MyAgentWithDefaults' settings, in combination with a cogServer
    // and its configuration file
    void testCogserverAndDefaultSettings() {
        logger().debug("BEGIN TEST: Agent default and specified parameters");

        CogServer& cogserver = static_cast<CogServer&>(server());

        // first, write the configuration file
        const char *config_file_name = "AgentUTest.config";
        std::ofstream out(config_file_name);
        out << "# auto-generated by AgentUTest\n";
        out << "MYAGENT_MOOD = sad\n";
        out << "MYAGENT_USE_BAYES = false\n";
        out.close();

        // reset configuration to default parameters
        config().reset();

        config().load(config_file_name);

        logger().debug(config().to_string());

        // Check that the config object has loaded those settings
        TS_ASSERT(config().has("MYAGENT_USE_BAYES"));
        TS_ASSERT(config()["MYAGENT_USE_BAYES"] == "false");
        TS_ASSERT(config().has("MYAGENT_MOOD"));
        TS_ASSERT(config()["MYAGENT_MOOD"] == "sad");

        // create a MyAgentWithDefaults instance
        MyAgentWithDefaults* agent;
        agent = static_cast<MyAgentWithDefaults*>
                (cogserver.createAgent(MyAgentWithDefaults::info().id));

        logger().debug(config().to_string());
        cout << endl << agent->to_string() << endl;

        // Check that the defaults haven't overriden the specified values!
        TS_ASSERT(config()["MYAGENT_USE_BAYES"] == "false");
        TS_ASSERT(config()["MYAGENT_ENERGY"] == "12345");
        TS_ASSERT(config()["MYAGENT_ENTHUSIASM"] == "1000");
        TS_ASSERT(config()["MYAGENT_MOOD"] == "sad");

        // destroy the MyAgentWithDefaults instance
        cogserver.destroyAllAgents(MyAgentWithDefaults::info().id);

        // finally, remove the temporary file and free the string with its name
        std::remove(config_file_name);
        
        logger().debug("END TEST: Agent default and specified parameters");
    }

};
