/*
 * tests/server/CogServerUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Andre Senna <senna@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <string>

#include <opencog/server/CogServer.h>

using namespace opencog;

class MyAgent : public Agent
{

private:

    std::string  _name;
    unsigned int _count;

public:

    virtual const ClassInfo& classinfo() const { return info(); }
    static const ClassInfo& info() {
        static const ClassInfo _ci("opencog::MyAgent");
        return _ci;
    }

    MyAgent() : Agent() { _count = 0; }
    void setFrequency(int f) { _frequency = f; }
    void setName(const std::string& n) { _name = n; }
    unsigned int count() { return _count; }
    void run(CogServer *server) {
        logger().debug("%ld: executed %s", server->getCycleCount(), _name.c_str());
        _count++;
    }
};

class CogServerUTest :  public CxxTest::TestSuite
{

private:


public:

    CogServerUTest() {
        logger().setLevel(Logger::DEBUG);
        //logger().setPrintToStdoutFlag(true);
    }

    ~CogServerUTest() {
	    // erase the log file if no assertions failed
	    if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().getFilename().c_str());
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testProcessAgents() {
        Factory<MyAgent, Agent> factory;
        CogServer& cogserver = static_cast<CogServer&>(server());
        cogserver.registerAgent(MyAgent::info().id, &factory);

        MyAgent* a[5];
        for (int i = 0; i < 5; ++i) {
            a[i] = static_cast<MyAgent*>(cogserver.createAgent(MyAgent::info().id));
            std::ostringstream oss; oss << "Agent" << i;
            a[i]->setName(oss.str());
            a[i]->setFrequency(i+1);
            cogserver.startAgent(a[i]);
        }

        cogserver.unitTestServerLoop(50);

        TS_ASSERT(a[0]->count() == 50);
        TS_ASSERT(a[1]->count() == 25);
        TS_ASSERT(a[2]->count() == 16);
        TS_ASSERT(a[3]->count() == 12);
        TS_ASSERT(a[4]->count() == 10);
    }

};
